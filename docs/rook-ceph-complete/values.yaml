# Global settings
global:
  namespace: rook-ceph

# Storage Class Configuration
storageClasses:
  gp3:
    enabled: true
    name: gp3
    type: gp3
    fsType: ext4
    iops: "3000"
    throughput: "125"
    volumeBindingMode: WaitForFirstConsumer
    allowVolumeExpansion: true

# Ceph Cluster Configuration
cephCluster:
  name: rook-ceph
  namespace: rook-ceph
  cephBlockPools:
    - name: replicapool
      namespace: rook-ceph
      replicated:
        size: 3
  
  # Ceph version
  cephVersion:
    image: quay.io/ceph/ceph:v18.2.2
    allowUnsupported: false
    
  # Cluster settings
  dataDirHostPath: /var/lib/rook
  skipUpgradeChecks: false
  continueUpgradeAfterChecksEvenIfNotHealthy: false
  waitTimeoutForHealthyOSDInMinutes: 10
  
  # Monitor configuration
  mon:
    count: 3
    allowMultiplePerNode: false
    
  # Manager configuration
  mgr:
    count: 2
    allowMultiplePerNode: false
    modules:
      - name: pg_autoscaler
        enabled: true
        
  # Dashboard
  dashboard:
    enabled: true
    ssl: true
    
  # Monitoring
  monitoring:
    enabled: false
    
  # Network settings
  network:
    connections:
      encryption:
        enabled: false
      compression:
        enabled: false
        
  # Storage configuration
  storage:
    useAllNodes: true
    useAllDevices: false
    storageClassDeviceSet:
      name: set1
      count: 3
      portable: true
      tuneDeviceClass: true
      tuneFastDeviceClass: false
      encrypted: false
      storageSize: 100Gi
      storageClass: gp3
      
  # Resource limits
  resources:
    mgr:
      limits:
        memory: "1Gi"
      requests:
        cpu: "500m"
        memory: "512Mi"
    mon:
      limits:
        memory: "2Gi"
      requests:
        cpu: "1000m"
        memory: "1Gi"
    osd:
      limits:
        memory: "4Gi"
      requests:
        cpu: "1000m"
        memory: "4Gi"

# Block Storage (RBD) Configuration
blockStorage:
  enabled: true
  storageClass:
    name: rook-ceph-block
    pool: replicapool
    imageFormat: "2"
    imageFeatures: layering
    fstype: ext4
    allowVolumeExpansion: true
    reclaimPolicy: Delete

# Filesystem (CephFS) Configuration
filesystem:
  enabled: true
  name: myfs
  namespace: rook-ceph
  
  # Metadata pool
  metadataPool:
    replicated:
      size: 3
      
  # Data pools
  dataPools:
    - name: replicated
      failureDomain: host
      replicated:
        size: 3
        
  preserveFilesystemOnDelete: true
  
  # Metadata server
  metadataServer:
    activeCount: 1
    activeStandby: true
    resources:
      limits:
        memory: "4Gi"
      requests:
        cpu: "1000m"
        memory: "4Gi"
    priorityClassName: system-cluster-critical
    
  # Storage class
  storageClass:
    name: rook-cephfs
    allowVolumeExpansion: true
    reclaimPolicy: Delete

# Object Storage Configuration
objectStorage:
  enabled: true
  
  # Object store
  objectStore:
    name: nvisionx
    namespace: rook-ceph
    
    # Metadata pool
    metadataPool:
      failureDomain: host
      replicated:
        size: 3
        
    # Data pool
    dataPool:
      failureDomain: host
      replicated:
        size: 3
        
    preservePoolsOnDelete: true
    
    # Gateway configuration
    gateway:
      port: 80
      instances: 2
      
      # Node placement
      placement:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                
      # Resource allocation
      resources:
        limits:
          cpu: "2000m"
          memory: "4Gi"
        requests:
          cpu: "1000m"
          memory: "1Gi"
          
      priorityClassName: system-cluster-critical
      
    # Health check
    healthCheck:
      bucket:
        disabled: false
        interval: 60s

  # Object store user
  objectStoreUser:
    name: nvisionx-user
    namespace: rook-ceph
    store: nvisionx
    displayName: "nvisionx S3 User"
    capabilities:
      user: "*"
      bucket: "*"

  # Bucket creation
  bucketCreation:
    enabled: true
    name: create-nvisionx-buckets
    namespace: default
    image: minio/mc:latest
    
    # Buckets to create
    buckets:
      - name: nvisnx-staging-minio
        policy: private
        description: "Private bucket for staging data"
      - name: applicationlogo
        policy: public-read
        description: "Public read bucket for app logos"
      - name: companylogo
        policy: public-read
        description: "Public read bucket for company logos"
      - name: csvfiles
        policy: private
        description: "Private bucket for CSV file storage"
        
    # Job configuration
    job:
      backoffLimit: 5
      restartPolicy: Never